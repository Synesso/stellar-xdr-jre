// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.xdr;

import com.google.common.base.Objects;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import okio.ByteString;

// === xdr source ============================================================

//  struct InflationPayout // or use PaymentResultAtom to limit types?
//  {
//      AccountID destination;
//      int64 amount;
//  };

//  ===========================================================================
public class InflationPayout implements XdrElement {
  private AccountID destination;
  private Int64 amount;

  public InflationPayout() {
  }

  public static void encode(XdrDataOutputStream stream, InflationPayout encodedInflationPayout) throws IOException {
    AccountID.encode(stream, encodedInflationPayout.destination);
    Int64.encode(stream, encodedInflationPayout.amount);
  }

  public static InflationPayout decode(ByteString bs) throws IOException {
    return decode(new XdrDataInputStream(new ByteArrayInputStream(bs.toByteArray())));
  }

  public static InflationPayout decode(XdrDataInputStream stream) throws IOException {
    InflationPayout decodedInflationPayout = new InflationPayout();
    decodedInflationPayout.destination = AccountID.decode(stream);
    decodedInflationPayout.amount = Int64.decode(stream);
    return decodedInflationPayout;
  }

  public AccountID getDestination() {
    return this.destination;
  }

  public void setDestination(AccountID value) {
    this.destination = value;
  }

  public Int64 getAmount() {
    return this.amount;
  }

  public void setAmount(Int64 value) {
    this.amount = value;
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public ByteString encode() throws IOException {
    ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrOutputStream = new XdrDataOutputStream(byteStream);
    encode(xdrOutputStream);
    return new ByteString(byteStream.toByteArray());
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.destination, this.amount);
  }

  @Override
  public boolean equals(Object object) {
    if (object == null || !(object instanceof InflationPayout)) {
      return false;
    }

    InflationPayout other = (InflationPayout) object;
    return Objects.equal(this.destination, other.destination) && Objects.equal(this.amount, other.amount);
  }
}
