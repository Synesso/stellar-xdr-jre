// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.xdr;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import okio.ByteString;

// === xdr source ============================================================

//  typedef PeerStats PeerStatList<25>;

//  ===========================================================================
public class PeerStatList implements XdrElement {
  private PeerStats[] PeerStatList;

  public PeerStatList() {
  }

  public PeerStatList(PeerStats[] PeerStatList) {
    this.PeerStatList = PeerStatList;
  }

  public static void encode(XdrDataOutputStream stream, PeerStatList encodedPeerStatList) throws IOException {
    int PeerStatListsize = encodedPeerStatList.getPeerStatList().length;
    stream.writeInt(PeerStatListsize);
    for (int i = 0; i < PeerStatListsize; i++) {
      PeerStats.encode(stream, encodedPeerStatList.PeerStatList[i]);
    }
  }

  public static PeerStatList decode(ByteString bs) throws IOException {
    return decode(new XdrDataInputStream(new ByteArrayInputStream(bs.toByteArray())));
  }

  public static PeerStatList decode(XdrDataInputStream stream) throws IOException {
    PeerStatList decodedPeerStatList = new PeerStatList();
    int PeerStatListsize = stream.readInt();
    decodedPeerStatList.PeerStatList = new PeerStats[PeerStatListsize];
    for (int i = 0; i < PeerStatListsize; i++) {
      decodedPeerStatList.PeerStatList[i] = PeerStats.decode(stream);
    }
    return decodedPeerStatList;
  }

  public PeerStats[] getPeerStatList() {
    return this.PeerStatList;
  }

  public void setPeerStatList(PeerStats[] value) {
    this.PeerStatList = value;
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public ByteString encode() throws IOException {
    ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrOutputStream = new XdrDataOutputStream(byteStream);
    encode(xdrOutputStream);
    return new ByteString(byteStream.toByteArray());
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.PeerStatList);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof PeerStatList)) {
      return false;
    }

    PeerStatList other = (PeerStatList) object;
    return Arrays.equals(this.PeerStatList, other.PeerStatList);
  }
}
