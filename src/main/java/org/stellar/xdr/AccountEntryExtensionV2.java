// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.xdr;

import com.google.common.base.Objects;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import okio.ByteString;

// === xdr source ============================================================

//  struct AccountEntryExtensionV2
//  {
//      uint32 numSponsored;
//      uint32 numSponsoring;
//      SponsorshipDescriptor signerSponsoringIDs<MAX_SIGNERS>;
//
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public class AccountEntryExtensionV2 implements XdrElement {
  private Uint32 numSponsored;
  private Uint32 numSponsoring;
  private SponsorshipDescriptor[] signerSponsoringIDs;
  private AccountEntryExtensionV2Ext ext;

  public AccountEntryExtensionV2() {
  }

  public static void encode(XdrDataOutputStream stream, AccountEntryExtensionV2 encodedAccountEntryExtensionV2)
      throws IOException {
    Uint32.encode(stream, encodedAccountEntryExtensionV2.numSponsored);
    Uint32.encode(stream, encodedAccountEntryExtensionV2.numSponsoring);
    int signerSponsoringIDssize = encodedAccountEntryExtensionV2.getSignerSponsoringIDs().length;
    stream.writeInt(signerSponsoringIDssize);
    for (int i = 0; i < signerSponsoringIDssize; i++) {
      SponsorshipDescriptor.encode(stream, encodedAccountEntryExtensionV2.signerSponsoringIDs[i]);
    }
    AccountEntryExtensionV2Ext.encode(stream, encodedAccountEntryExtensionV2.ext);
  }

  public static AccountEntryExtensionV2 decode(ByteString bs) throws IOException {
    return decode(new XdrDataInputStream(new ByteArrayInputStream(bs.toByteArray())));
  }

  public static AccountEntryExtensionV2 decode(XdrDataInputStream stream) throws IOException {
    AccountEntryExtensionV2 decodedAccountEntryExtensionV2 = new AccountEntryExtensionV2();
    decodedAccountEntryExtensionV2.numSponsored = Uint32.decode(stream);
    decodedAccountEntryExtensionV2.numSponsoring = Uint32.decode(stream);
    int signerSponsoringIDssize = stream.readInt();
    decodedAccountEntryExtensionV2.signerSponsoringIDs = new SponsorshipDescriptor[signerSponsoringIDssize];
    for (int i = 0; i < signerSponsoringIDssize; i++) {
      decodedAccountEntryExtensionV2.signerSponsoringIDs[i] = SponsorshipDescriptor.decode(stream);
    }
    decodedAccountEntryExtensionV2.ext = AccountEntryExtensionV2Ext.decode(stream);
    return decodedAccountEntryExtensionV2;
  }

  public Uint32 getNumSponsored() {
    return this.numSponsored;
  }

  public void setNumSponsored(Uint32 value) {
    this.numSponsored = value;
  }

  public Uint32 getNumSponsoring() {
    return this.numSponsoring;
  }

  public void setNumSponsoring(Uint32 value) {
    this.numSponsoring = value;
  }

  public SponsorshipDescriptor[] getSignerSponsoringIDs() {
    return this.signerSponsoringIDs;
  }

  public void setSignerSponsoringIDs(SponsorshipDescriptor[] value) {
    this.signerSponsoringIDs = value;
  }

  public AccountEntryExtensionV2Ext getExt() {
    return this.ext;
  }

  public void setExt(AccountEntryExtensionV2Ext value) {
    this.ext = value;
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public ByteString encode() throws IOException {
    ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrOutputStream = new XdrDataOutputStream(byteStream);
    encode(xdrOutputStream);
    return new ByteString(byteStream.toByteArray());
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.numSponsored, this.numSponsoring, Arrays.hashCode(this.signerSponsoringIDs), this.ext);
  }

  @Override
  public boolean equals(Object object) {
    if (object == null || !(object instanceof AccountEntryExtensionV2)) {
      return false;
    }

    AccountEntryExtensionV2 other = (AccountEntryExtensionV2) object;
    return Objects.equal(this.numSponsored, other.numSponsored) && Objects.equal(this.numSponsoring,
        other.numSponsoring) && Arrays.equals(this.signerSponsoringIDs, other.signerSponsoringIDs) && Objects.equal(
        this.ext, other.ext);
  }

  public static class AccountEntryExtensionV2Ext {
    Integer v;

    public AccountEntryExtensionV2Ext() {
    }

    public static void encode(XdrDataOutputStream stream, AccountEntryExtensionV2Ext encodedAccountEntryExtensionV2Ext)
        throws IOException {
      //Xdrgen::AST::Typespecs::Int
      //Integer
      stream.writeInt(encodedAccountEntryExtensionV2Ext.getDiscriminant().intValue());
      switch (encodedAccountEntryExtensionV2Ext.getDiscriminant()) {
        case 0:
          break;
      }
    }

    public static AccountEntryExtensionV2Ext decode(ByteString bs) throws IOException {
      return decode(new XdrDataInputStream(new ByteArrayInputStream(bs.toByteArray())));
    }

    public static AccountEntryExtensionV2Ext decode(XdrDataInputStream stream) throws IOException {
      AccountEntryExtensionV2Ext decodedAccountEntryExtensionV2Ext = new AccountEntryExtensionV2Ext();
      Integer discriminant = stream.readInt();
      decodedAccountEntryExtensionV2Ext.setDiscriminant(discriminant);
      switch (decodedAccountEntryExtensionV2Ext.getDiscriminant()) {
        case 0:
          break;
      }
      return decodedAccountEntryExtensionV2Ext;
    }

    public Integer getDiscriminant() {
      return this.v;
    }

    public void setDiscriminant(Integer value) {
      this.v = value;
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public ByteString encode() throws IOException {
      ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrOutputStream = new XdrDataOutputStream(byteStream);
      encode(xdrOutputStream);
      return new ByteString(byteStream.toByteArray());
    }

    @Override
    public int hashCode() {
      return Objects.hashCode(this.v);
    }

    @Override
    public boolean equals(Object object) {
      if (object == null || !(object instanceof AccountEntryExtensionV2Ext)) {
        return false;
      }

      AccountEntryExtensionV2Ext other = (AccountEntryExtensionV2Ext) object;
      return Objects.equal(this.v, other.v);
    }
  }
}
