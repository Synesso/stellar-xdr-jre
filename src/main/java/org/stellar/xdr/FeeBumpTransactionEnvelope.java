// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.xdr;

import com.google.common.base.Objects;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import okio.ByteString;

// === xdr source ============================================================

//  struct FeeBumpTransactionEnvelope
//  {
//      FeeBumpTransaction tx;
//      /* Each decorated signature is a signature over the SHA256 hash of
//       * a TransactionSignaturePayload */
//      DecoratedSignature signatures<20>;
//  };

//  ===========================================================================
public class FeeBumpTransactionEnvelope implements XdrElement {
  private FeeBumpTransaction tx;
  private DecoratedSignature[] signatures;

  public FeeBumpTransactionEnvelope() {
  }

  public static void encode(XdrDataOutputStream stream, FeeBumpTransactionEnvelope encodedFeeBumpTransactionEnvelope)
      throws IOException {
    FeeBumpTransaction.encode(stream, encodedFeeBumpTransactionEnvelope.tx);
    int signaturessize = encodedFeeBumpTransactionEnvelope.getSignatures().length;
    stream.writeInt(signaturessize);
    for (int i = 0; i < signaturessize; i++) {
      DecoratedSignature.encode(stream, encodedFeeBumpTransactionEnvelope.signatures[i]);
    }
  }

  public static FeeBumpTransactionEnvelope decode(ByteString bs) throws IOException {
    return decode(new XdrDataInputStream(new ByteArrayInputStream(bs.toByteArray())));
  }

  public static FeeBumpTransactionEnvelope decode(XdrDataInputStream stream) throws IOException {
    FeeBumpTransactionEnvelope decodedFeeBumpTransactionEnvelope = new FeeBumpTransactionEnvelope();
    decodedFeeBumpTransactionEnvelope.tx = FeeBumpTransaction.decode(stream);
    int signaturessize = stream.readInt();
    decodedFeeBumpTransactionEnvelope.signatures = new DecoratedSignature[signaturessize];
    for (int i = 0; i < signaturessize; i++) {
      decodedFeeBumpTransactionEnvelope.signatures[i] = DecoratedSignature.decode(stream);
    }
    return decodedFeeBumpTransactionEnvelope;
  }

  public FeeBumpTransaction getTx() {
    return this.tx;
  }

  public void setTx(FeeBumpTransaction value) {
    this.tx = value;
  }

  public DecoratedSignature[] getSignatures() {
    return this.signatures;
  }

  public void setSignatures(DecoratedSignature[] value) {
    this.signatures = value;
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public ByteString encode() throws IOException {
    ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrOutputStream = new XdrDataOutputStream(byteStream);
    encode(xdrOutputStream);
    return new ByteString(byteStream.toByteArray());
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.tx, Arrays.hashCode(this.signatures));
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof FeeBumpTransactionEnvelope)) {
      return false;
    }

    FeeBumpTransactionEnvelope other = (FeeBumpTransactionEnvelope) object;
    return Objects.equal(this.tx, other.tx) && Arrays.equals(this.signatures, other.signatures);
  }

  public static final class Builder {
    private FeeBumpTransaction tx;
    private DecoratedSignature[] signatures;

    public Builder tx(FeeBumpTransaction tx) {
      this.tx = tx;
      return this;
    }

    public Builder signatures(DecoratedSignature[] signatures) {
      this.signatures = signatures;
      return this;
    }

    public FeeBumpTransactionEnvelope build() {
      FeeBumpTransactionEnvelope val = new FeeBumpTransactionEnvelope();
      val.setTx(tx);
      val.setSignatures(signatures);
      return val;
    }
  }
}
