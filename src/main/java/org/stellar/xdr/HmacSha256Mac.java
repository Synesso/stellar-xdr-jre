// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.xdr;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import okio.ByteString;

// === xdr source ============================================================

//  struct HmacSha256Mac
//  {
//      opaque mac[32];
//  };

//  ===========================================================================
public class HmacSha256Mac implements XdrElement {
  private byte[] mac;

  public HmacSha256Mac() {
  }

  public static void encode(XdrDataOutputStream stream, HmacSha256Mac encodedHmacSha256Mac) throws IOException {
    int macsize = encodedHmacSha256Mac.mac.length;
    stream.write(encodedHmacSha256Mac.getMac(), 0, macsize);
  }

  public static HmacSha256Mac decode(ByteString bs) throws IOException {
    return decode(new XdrDataInputStream(new ByteArrayInputStream(bs.toByteArray())));
  }

  public static HmacSha256Mac decode(XdrDataInputStream stream) throws IOException {
    HmacSha256Mac decodedHmacSha256Mac = new HmacSha256Mac();
    int macsize = 32;
    decodedHmacSha256Mac.mac = new byte[macsize];
    stream.read(decodedHmacSha256Mac.mac, 0, macsize);
    return decodedHmacSha256Mac;
  }

  public byte[] getMac() {
    return this.mac;
  }

  public void setMac(byte[] value) {
    this.mac = value;
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public ByteString encode() throws IOException {
    ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrOutputStream = new XdrDataOutputStream(byteStream);
    encode(xdrOutputStream);
    return new ByteString(byteStream.toByteArray());
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.mac);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof HmacSha256Mac)) {
      return false;
    }

    HmacSha256Mac other = (HmacSha256Mac) object;
    return Arrays.equals(this.mac, other.mac);
  }

  public static final class Builder {
    private byte[] mac;

    public Builder mac(byte[] mac) {
      this.mac = mac;
      return this;
    }

    public HmacSha256Mac build() {
      HmacSha256Mac val = new HmacSha256Mac();
      val.setMac(mac);
      return val;
    }
  }
}
