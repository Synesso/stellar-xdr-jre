// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.xdr;

import com.google.common.base.Objects;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import okio.ByteString;

// === xdr source ============================================================

//  typedef PublicKey NodeID;

//  ===========================================================================
public class NodeID implements XdrElement {
  private PublicKey NodeID;

  public static void encode(XdrDataOutputStream stream, NodeID encodedNodeID) throws IOException {
    PublicKey.encode(stream, encodedNodeID.NodeID);
  }

  public static NodeID decode(ByteString bs) throws IOException {
    return decode(new XdrDataInputStream(new ByteArrayInputStream(bs.toByteArray())));
  }

  public static NodeID decode(XdrDataInputStream stream) throws IOException {
    NodeID decodedNodeID = new NodeID();
    decodedNodeID.NodeID = PublicKey.decode(stream);
    return decodedNodeID;
  }

  public PublicKey getNodeID() {
    return this.NodeID;
  }

  public void setNodeID(PublicKey value) {
    this.NodeID = value;
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public ByteString encode() throws IOException {
    ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrOutputStream = new XdrDataOutputStream(byteStream);
    encode(xdrOutputStream);
    return new ByteString(byteStream.toByteArray());
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.NodeID);
  }

  @Override
  public boolean equals(Object object) {
    if (object == null || !(object instanceof NodeID)) {
      return false;
    }

    NodeID other = (NodeID) object;
    return Objects.equal(this.NodeID, other.NodeID);
  }
}
